package main

import (
	"bytes"
	"flag"
	"io/ioutil"
	"os"
	"os/exec"
	"path"
	"path/filepath"
	"regexp"
	"runtime"
	"strings"
	"sync"
	"time"

	"github.com/fsnotify/fsnotify"
	"github.com/golang/glog"
)

var (
	exit                chan bool
	currpath            string
	cmd                 *exec.Cmd
	excludedPaths       StrFlags
	state               sync.Mutex
	eventTime           = make(map[string]int64)
	scheduleTime        time.Time
	watchExts           = []string{".go"}
	watchExtsStatic     = []string{".html", ".tpl", ".js", ".css"}
	ignoredFilesRegExps = []string{
		`.#(\w+).go`,
		`.(\w+).go.swp`,
		`(\w+).go~`,
		`(\w+).tmp`,
	}
)

// NewWatcher starts an fsnotify Watcher on the specified paths
func NewWatcher(paths []string) {
	watcher, err := fsnotify.NewWatcher()
	if err != nil {
		glog.Fatalf("Failed to create watcher: %s", err)
	}

	go func() {
		for {
			select {
			case e := <-watcher.Events:
				isBuild := true

				if ifStaticFile(e.Name) {
					continue
				}
				// Skip ignored files
				if shouldIgnoreFile(e.Name) {
					continue
				}

				if !shouldWatchFileWithExtension(e.Name) {
					continue
				}

				mt := GetFileModTime(e.Name)
				if t := eventTime[e.Name]; mt == t {
					glog.V(7).Info(e.String())
					isBuild = false
				}

				eventTime[e.Name] = mt

				if isBuild {
					glog.V(7).Infof("Event fired: %s", e)
					go func() {
						// Wait 1s before autobuild until there is no file change.
						scheduleTime = time.Now().Add(1 * time.Second)
						time.Sleep(scheduleTime.Sub(time.Now()))
						AutoBuild()
					}()
				}
			case err := <-watcher.Errors:
				glog.Warningf("Watcher error: %s", err.Error()) // No need to exit here
			}
		}
	}()

	glog.Info("Initializing watcher...")
	for _, path := range paths {
		glog.Infof("Watching: %s", path)
		err = watcher.Add(path)
		if err != nil {
			glog.Fatalf("Failed to watch directory: %s", err)
		}
	}
}

// AutoBuild builds the specified set of files
func AutoBuild() {
	state.Lock()
	defer state.Unlock()

	os.Chdir(currpath)

	var (
		err    error
		stderr bytes.Buffer
	)
	bcmd := exec.Command("make", "devbuild")
	bcmd.Stderr = &stderr
	err = bcmd.Run()
	if err != nil {
		glog.Errorf("Failed to build the application: %s", stderr.String())
		return
	}

	glog.Info("Built Successfully!")
	Restart()
}

// Kill kills the running command process
func Kill() {
	defer func() {
		if e := recover(); e != nil {
			glog.Infof("Kill recover: %s", e)
		}
	}()
	if cmd != nil && cmd.Process != nil {
		glog.Infof("kill %d\n", cmd.Process.Pid)
		err := cmd.Process.Kill()
		if err != nil {
			glog.Errorf("Error while killing cmd process: %s", err)
		}
	}
}

// Restart kills the running command process and starts it again
func Restart() {
	glog.Infof("Kill running process %s %d\n", FILE(), LINE())
	Kill()
	go Start()
}

func getCmd() string {
	cmd := exec.Command("make", "devrun")
	output, _ := cmd.Output()
	return strings.TrimSpace(strings.Split(string(output), "\n")[0])
}

// Start starts the command process
func Start() {
	c := strings.Fields(getCmd())
	cmd = exec.Command(c[0], c[1:]...)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	go cmd.Run()

	time.Sleep(time.Second)
	glog.Infof("%d %v running...", cmd.Process.Pid, c)
}

func ifStaticFile(filename string) bool {
	for _, s := range watchExtsStatic {
		if strings.HasSuffix(filename, s) {
			return true
		}
	}
	return false
}

// shouldIgnoreFile ignores filenames generated by Emacs, Vim or SublimeText.
// It returns true if the file should be ignored, false otherwise.
func shouldIgnoreFile(filename string) bool {
	for _, regex := range ignoredFilesRegExps {
		r, err := regexp.Compile(regex)
		if err != nil {
			glog.Fatalf("Could not compile regular expression: %s", err)
		}
		if r.MatchString(filename) {
			return true
		}
		continue
	}
	return false
}

// shouldWatchFileWithExtension returns true if the name of the file
// hash a suffix that should be watched.
func shouldWatchFileWithExtension(name string) bool {
	for _, s := range watchExts {
		if strings.HasSuffix(name, s) {
			return true
		}
	}
	return false
}

// If a file is excluded
func isExcluded(file string) bool {
	for _, p := range excludedPaths {
		absP, err := filepath.Abs(p)
		if err != nil {
			glog.Errorf("Cannot get absolute path of '%s'", p)
			continue
		}
		absFilePath, err := filepath.Abs(file)
		if err != nil {
			glog.Errorf("Cannot get absolute path of '%s'", file)
			break
		}
		if strings.HasPrefix(absFilePath, absP) {
			glog.Infof("'%s' is not being watched", file)
			return true
		}
	}
	return false
}
func readAppDirectories(directory string, paths *[]string) {
	fileInfos, err := ioutil.ReadDir(directory)
	if err != nil {
		return
	}

	useDirectory := false
	for _, fileInfo := range fileInfos {
		if isExcluded(path.Join(directory, fileInfo.Name())) {
			continue
		}

		if fileInfo.IsDir() && fileInfo.Name()[0] != '.' {
			readAppDirectories(directory+"/"+fileInfo.Name(), paths)
			continue
		}

		if useDirectory {
			continue
		}

		if path.Ext(fileInfo.Name()) == ".go" || (ifStaticFile(fileInfo.Name())) {
			*paths = append(*paths, directory)
			useDirectory = true
		}
	}
}

func init() {
	exit = make(chan bool)
	currpath, _ = os.Getwd()

	flag.Var(&excludedPaths, "e", "List of paths to exclude.")
}

func main() {
	var paths []string

	flag.Parse()
	excludedPaths = append(excludedPaths, "docs", "swagger", "vendor")

	readAppDirectories(currpath, &paths)
	NewWatcher(paths)
	AutoBuild()
	for {
		<-exit
		runtime.Goexit()
	}
}
